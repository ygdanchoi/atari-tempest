{"version":3,"sources":["webpack:///webpack/bootstrap db490d948321162d70ae","webpack:///./lib/util.js","webpack:///./lib/moving_object.js","webpack:///./lib/blaster_bullet.js","webpack:///./lib/blaster.js","webpack:///./lib/blaster_explosion.js","webpack:///./lib/enemy_explosion.js","webpack:///./lib/game.js","webpack:///./lib/enemy_bullet.js","webpack:///./lib/game_view.js","webpack:///./lib/atari_tempest.js","webpack:///./lib/flipper.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AChEA;;AAEA;AACA;AACA;AACA;AACA,4CAA4C,qBAAqB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;;;;;;ACxHA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;AChBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACxCA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;ACtHA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,wCAAwC;AAC3D;AACA;AACA;AACA;AACA;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AClFA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC,aAAa;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,iCAAiC;AACpD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C,qBAAqB,2BAA2B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,+BAA+B,WAAW;AAC1C,+BAA+B,WAAW;AAC1C,+BAA+B,WAAW;AAC1C;;AAEA;AACA;AACA,mBAAmB,6BAA6B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,iCAAiC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,2BAA2B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,iCAAiC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbxrBA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA,4CAA4C;AAC5C;;AAEA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;;AAEA;;AAEA;;;;;;;AC5DA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,CAAC;;;;;;;ACZD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA","file":"./bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap db490d948321162d70ae","const Game = require('./game');\r\n\r\nconst Util = {\r\n  isInside(point, boundary) {\r\n    let result = false;\r\n    // http://stackoverflow.com/questions/8721406/how-to-determine-if-a-point-is-inside-a-2d-convex-polygon\r\n    for (let i = 0, j = boundary.length - 1; i < boundary.length; j = i++) {\r\n      if ((boundary[i][1] > point[1]) != (boundary[j][1] > point[1]) &&\r\n      (point[0] < (boundary[j][0] - boundary[i][0]) * (point[1] - boundary[i][1]) / (boundary[j][1] - boundary[i][1]) + boundary[i][0])) {\r\n        result = !result;\r\n      }\r\n    }\r\n    return result;\r\n  },\r\n\r\n  distanceBetweenPoints(point1, point2) {\r\n    const x1 = point1[0];\r\n    const y1 = point1[1];\r\n    const x2 = point2[0];\r\n    const y2 = point2[1];\r\n    return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\r\n  },\r\n\r\n  distanceToLine(point0, point1, point2) {\r\n    const x0 = point0[0];\r\n    const y0 = point0[1];\r\n    const x1 = point1[0];\r\n    const y1 = point1[1];\r\n    const x2 = point2[0];\r\n    const y2 = point2[1];\r\n    const numerator = Math.abs((y2 - y1) * x0 - (x2 - x1) * y0 + x2 * y1 - y2 * x1);\r\n    const denominator = Math.sqrt(Math.pow(y2 - y1, 2) + Math.pow(x2 - x1, 2));\r\n    return numerator / denominator;\r\n  },\r\n\r\n  xFractionInTubeQuad(point, tubeQuad) {\r\n    const distBack = Util.distanceToLine(point, tubeQuad[0], tubeQuad[3]);\r\n    const distForward = Util.distanceToLine(point, tubeQuad[1], tubeQuad[2]);\r\n    const distTotal = distBack + distForward;\r\n    return distBack / distTotal;\r\n  },\r\n\r\n  midpoint(point1, point2) {\r\n    const x1 = point1[0];\r\n    const y1 = point1[1];\r\n    const x2 = point2[0];\r\n    const y2 = point2[1];\r\n    return [(x1 + x2) / 2, (y1 + y2) / 2];\r\n  },\r\n\r\n  weightedMidpoint(point1, point2, weight) {\r\n    const x1 = point1[0];\r\n    const y1 = point1[1];\r\n    const x2 = point2[0];\r\n    const y2 = point2[1];\r\n    return [x1 * (1 - weight) + x2 * weight, y1 * (1 - weight) + y2 * weight];\r\n  },\r\n\r\n  vector(point1, point2, scalar) {\r\n    const x1 = point1[0];\r\n    const y1 = point1[1];\r\n    const x2 = point2[0];\r\n    const y2 = point2[1];\r\n    return [(x2 - x1) * scalar, (y2 - y1) * scalar];\r\n  },\r\n\r\n  unitVector(point1, point2, scalar) {\r\n    const x1 = point1[0];\r\n    const y1 = point1[1];\r\n    const x2 = point2[0];\r\n    const y2 = point2[1];\r\n    const distance = Util.distanceBetweenPoints(point1, point2);\r\n    return [(x2 - x1) / distance * scalar, (y2 - y1) / distance * scalar];\r\n  },\r\n\r\n  orthogonalUnitVector(point1, point2, scalar) {\r\n    const x1 = point1[0];\r\n    const y1 = point1[1];\r\n    const x2 = point2[0];\r\n    const y2 = point2[1];\r\n    const x = (x2 - x1) / Util.distanceBetweenPoints(point1, point2) * scalar;\r\n    const y = (y2 - y1) / Util.distanceBetweenPoints(point1, point2) * scalar;\r\n    return [y, -x];\r\n  },\r\n\r\n  addVector(point1, point2) {\r\n    const x1 = point1[0];\r\n    const y1 = point1[1];\r\n    const x2 = point2[0];\r\n    const y2 = point2[1];\r\n    return [x1 + x2, y1 + y2];\r\n  },\r\n\r\n  addVectorScaled(point1, point2, scalar) {\r\n    const x1 = point1[0];\r\n    const y1 = point1[1];\r\n    const x2 = point2[0];\r\n    const y2 = point2[1];\r\n    return [x1 + x2 * scalar, y1 + y2 * scalar];\r\n  },\r\n\r\n  slope(point1, point2) {\r\n    const x1 = point1[0];\r\n    const y1 = point1[1];\r\n    const x2 = point2[0];\r\n    const y2 = point2[1];\r\n    return (y2 - y1) / (x2 - x1);\r\n  },\r\n\r\n  rotateAroundPoint(point1, point2, angle) {\r\n    const x1 = point1[0];\r\n    const y1 = point1[1];\r\n    const x2 = point2[0];\r\n    const y2 = point2[1];\r\n    const x = (x1 - x2) * Math.cos(angle) - (y1 - y2) * Math.sin(angle) + x2;\r\n    const y = (x1 - x2) * Math.sin(angle) + (y1 - y2) * Math.cos(angle) + y2;\r\n    return [x, y];\r\n  },\r\n};\r\n\r\nmodule.exports = Util;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/util.js\n// module id = 0\n// module chunks = 0","class MovingObject {\r\n  constructor(options) {\r\n    this.game = options.game;\r\n  }\r\n\r\n  draw(context) {\r\n  }\r\n\r\n  move(delta) {\r\n  }\r\n\r\n  remove() {\r\n    this.game.remove(this);\r\n  }\r\n}\r\n\r\nmodule.exports = MovingObject;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/moving_object.js\n// module id = 1\n// module chunks = 0","const MovingObject = require('./moving_object');\r\nconst Util = require('./util');\r\n\r\nclass BlasterBullet extends MovingObject {\r\n  constructor(options) {\r\n    super(options);\r\n    this.tubeQuadIdx = options.tubeQuadIdx;\r\n    this.zPos = 0;\r\n  }\r\n\r\n  draw(context) {\r\n    const tubeQuad = this.game.tubeQuads[this.tubeQuadIdx];\r\n    context.fillStyle = BlasterBullet.WHITE;\r\n    context.shadowColor = BlasterBullet.WHITE;\r\n    context.shadowBlur = BlasterBullet.SHADOW_BLUR;\r\n    context.beginPath();\r\n    const posFrom = Util.midpoint(tubeQuad[0], tubeQuad[1]);\r\n    const posTo = Util.midpoint(tubeQuad[2], tubeQuad[3]);\r\n    const zFraction = this.zPos / BlasterBullet.MAX_Z_POS;\r\n    const easeFraction = 1 - Math.pow(zFraction - 1, 2);\r\n    const vectorTo = Util.vector(posFrom, posTo, easeFraction);\r\n    const pos = Util.addVector(posFrom, vectorTo);\r\n    context.arc(\r\n      pos[0], pos[1], 3 * (1 - easeFraction) + 1, 0, 2 * Math.PI, true\r\n    );\r\n    context.fill();\r\n  }\r\n\r\n  move(delta) {\r\n    this.zPos += 5;\r\n    if (this.zPos > 120) {\r\n      this.remove();\r\n    }\r\n  }\r\n}\r\n\r\nBlasterBullet.WHITE = '#ffffff';\r\nBlasterBullet.SHADOW_BLUR = 10;\r\nBlasterBullet.MAX_Z_POS = 120;\n\r\nmodule.exports = BlasterBullet;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/blaster_bullet.js\n// module id = 2\n// module chunks = 0","const MovingObject = require('./moving_object');\r\nconst BlasterBullet = require('./blaster_bullet');\r\nconst Util = require('./util');\r\n\r\nclass Blaster extends MovingObject {\r\n  constructor(options) {\r\n    super(options);\r\n    this.xPos = 0;\r\n    this.targetXPos = null;\r\n    this.firing = false;\r\n    this.changingXPos = 0;\r\n  }\r\n\r\n  draw(context) {\r\n    this.xPosInTubeQuad = this.xPos % Blaster.NUM_BLASTER_POSITIONS;\r\n    this.tubeQuadIdx = Math.floor(this.xPos / Blaster.NUM_BLASTER_POSITIONS);\r\n    const tubeQuad = this.game.tubeQuads[this.tubeQuadIdx];\r\n    this.drawTubeQuad(context, tubeQuad);\r\n    this.drawBlaster(context, tubeQuad);\r\n    if (this.targetXPos) {\r\n      const numXPos = this.game.tubeQuads.length * Blaster.NUM_BLASTER_POSITIONS;\r\n      if (this.xPos <= this.targetXPos - Blaster.NUM_BLASTER_POSITIONS) {\r\n        if (this.targetXPos - this.xPos < numXPos / 2) {\r\n          this.changingXPos = Blaster.NUM_BLASTER_POSITIONS;\r\n        } else {\r\n          this.changingXPos = -Blaster.NUM_BLASTER_POSITIONS;\r\n        }\r\n      } else if (this.xPos >= this.targetXPos + Blaster.NUM_BLASTER_POSITIONS) {\r\n        if (this.xPos - this.targetXPos < numXPos / 2) {\r\n          this.changingXPos = -Blaster.NUM_BLASTER_POSITIONS;\r\n        } else {\r\n          this.changingXPos = Blaster.NUM_BLASTER_POSITIONS;\r\n        }\r\n      } else {\r\n        this.changingXPos = 0;\r\n        this.xPos = this.targetXPos;\r\n        this.targetXPos = null;\r\n      }\r\n    }\r\n    if (this.changingXPos !== 0) {\r\n      this.changeXPos(this.changingXPos);\r\n    }\r\n    if (this.firing) {\r\n      this.fireBullet();\r\n    }\r\n  }\r\n\r\n  drawTubeQuad(context, tubeQuad) {\r\n    context.strokeStyle = Blaster.YELLOW;\r\n    context.shadowColor = Blaster.YELLOW;\r\n    context.shadowBlur = Blaster.SHADOW_BLUR;\r\n    context.beginPath();\r\n    context.moveTo(...tubeQuad[1]);\r\n    context.lineTo(...tubeQuad[2]);\r\n    context.moveTo(...tubeQuad[3]);\r\n    context.lineTo(...tubeQuad[0]);\r\n    context.closePath();\r\n    context.stroke();\r\n  }\r\n\r\n  drawBlaster(context, tubeQuad) {\r\n    const posOuterMid = Util.weightedMidpoint(tubeQuad[0], tubeQuad[1], (this.xPosInTubeQuad + 1) / (Blaster.NUM_BLASTER_POSITIONS + 1));\r\n    const posOuterLeft = Util.weightedMidpoint(tubeQuad[0], tubeQuad[1], 0.9);\r\n    const posOuterClawLeft = Util.weightedMidpoint(tubeQuad[0], tubeQuad[1], 0.6);\r\n    const posOuterClawRight = Util.weightedMidpoint(tubeQuad[0], tubeQuad[1], 0.4);\r\n    const posOuterRight = Util.weightedMidpoint(tubeQuad[0], tubeQuad[1], 0.1);\r\n    const posInnerMid = Util.weightedMidpoint(tubeQuad[3], tubeQuad[2], (this.xPosInTubeQuad + 1) / (Blaster.NUM_BLASTER_POSITIONS + 1));\r\n    const vectorOuterBack = Util.unitVector(posOuterMid, posInnerMid, -20);\r\n    const vectorInnerBack = Util.unitVector(posOuterMid, posInnerMid, -10);\r\n    const vectorClawLeft = Util.unitVector(posOuterClawLeft, posInnerMid, 10);\r\n    const vectorClawRight = Util.unitVector(posOuterClawRight, posInnerMid, 10);\r\n    const posOuterBack = Util.addVector(posOuterMid, vectorOuterBack);\r\n    const posInnerBack = Util.addVector(posOuterMid, vectorInnerBack);\r\n    const posClawLeft = Util.addVector(posOuterClawLeft, vectorClawLeft);\r\n    const posClawRight = Util.addVector(posOuterClawRight, vectorClawRight);\r\n    context.strokeStyle = Blaster.YELLOW;\r\n    context.shadowColor = Blaster.YELLOW;\r\n    context.shadowBlur = Blaster.SHADOW_BLUR;\r\n    context.beginPath();\r\n    context.moveTo(...tubeQuad[0]);\r\n    context.lineTo(...posOuterBack);\r\n    context.lineTo(...tubeQuad[1]);\r\n    context.lineTo(...posClawLeft);\r\n    context.lineTo(...posOuterLeft);\r\n    context.lineTo(...posInnerBack);\r\n    context.lineTo(...posOuterRight);\r\n    context.lineTo(...posClawRight);\r\n    context.closePath();\r\n    context.stroke();\r\n  }\r\n\r\n  fireBullet() {\r\n    const tubeQuad = this.tubeQuad;\r\n    if (this.game.blasterBullets.length < 8) {\r\n      const blasterBullet = new BlasterBullet({\r\n        game: this.game,\r\n        tubeQuadIdx: this.tubeQuadIdx,\r\n      });\r\n      this.game.add(blasterBullet);\r\n    }\r\n  }\r\n\r\n  changeXPos(increment) {\r\n    this.xPos += increment;\r\n    const numXPos = this.game.tubeQuads.length * Blaster.NUM_BLASTER_POSITIONS;\r\n    if (this.xPos < 0) {\r\n      this.xPos += numXPos;\r\n    } else if (this.xPos >= numXPos) {\r\n      this.xPos -= numXPos;\r\n    }\r\n  }\r\n}\r\n\r\nBlaster.YELLOW = '#ffff00';\r\nBlaster.SHADOW_BLUR = 10;\r\nBlaster.NUM_BLASTER_POSITIONS = 7;\r\nBlaster.MAX_NUM_BULLETS = 8;\r\n\r\nmodule.exports = Blaster;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/blaster.js\n// module id = 3\n// module chunks = 0","const MovingObject = require('./moving_object');\r\nconst Util = require('./util');\r\n\r\nclass BlasterExplosion extends MovingObject {\r\n  constructor(options) {\r\n    super(options);\r\n    this.tubeQuadIdx = options.tubeQuadIdx;\r\n    this.size = 1;\r\n    this.shinking = false;\r\n  }\r\n\r\n  draw(context) {\r\n    this.drawExplosion(context);\r\n  }\r\n\r\n  drawExplosion(context) {\r\n    const tubeQuad = this.game.tubeQuads[this.tubeQuadIdx];\r\n    const pos = Util.midpoint(tubeQuad[0], tubeQuad[1]);\r\n    const colors = [BlasterExplosion.RED, BlasterExplosion.WHITE, BlasterExplosion.YELLOW];\r\n    for (let i = 0; i < BlasterExplosion.COORDS.length - 1; i += 2) {\r\n      context.beginPath();\r\n      const flip = this.shrinking ? 1 : -1;\r\n      context.strokeStyle = colors[(BlasterExplosion.MAX_SIZE + i / 2 + this.size * flip) % 3];\r\n      context.shadowColor = colors[(BlasterExplosion.MAX_SIZE + i / 2 + this.size * flip) % 3];\r\n      context.shadowBlur = BlasterExplosion.SHADOW_BLUR;\r\n      for (var j = 1; j <= this.size; j += 2) {\r\n        const scalar = j / (BlasterExplosion.MAX_SIZE - 1);\r\n        context.moveTo(...Util.addVectorScaled(pos, BlasterExplosion.COORDS[i], scalar));\r\n        context.lineTo(...Util.addVectorScaled(pos, BlasterExplosion.COORDS[i + 1], scalar));\r\n        context.lineTo(...Util.addVectorScaled(pos, BlasterExplosion.COORDS[i + 2], scalar));\r\n      }\r\n      context.stroke();\r\n    }\r\n  }\r\n\r\n  move(delta) {\r\n    if (this.shrinking) {\r\n      this.size -= 1;\r\n    } else {\r\n      this.size += 1;\r\n    }\r\n    if (this.size >= BlasterExplosion.MAX_SIZE) {\r\n      this.shrinking = true;\r\n    } else if (this.size <= 0) {\r\n      this.remove();\r\n    }\r\n  }\r\n}\r\n\r\nBlasterExplosion.MAX_SIZE = 12;\r\nBlasterExplosion.WHITE = '#ffffff';\r\nBlasterExplosion.YELLOW = '#ffff00';\r\nBlasterExplosion.RED = '#ff0000';\r\nBlasterExplosion.SHADOW_BLUR;\r\nBlasterExplosion.COORDS = [\r\n  [6, -72],\r\n  [31, -86],\r\n  [28, -39],\r\n  [60, -57],\r\n  [49, -38],\r\n  [64, -36],\r\n  [57, -22],\r\n  [100, -14],\r\n  [42, 14],\r\n  [60, 54],\r\n  [31, 43],\r\n  [28, 79],\r\n  [6, 57],\r\n  [-15, 79],\r\n  [-22, 57],\r\n  [-30, 61],\r\n  [-24, 25],\r\n  [-69, 41],\r\n  [-58, 18],\r\n  [-69, 14],\r\n  [-51, 0],\r\n  [-83, -43],\r\n  [-22, -32],\r\n  [-19, -81],\r\n  [6, -72],\r\n];\r\n\r\nmodule.exports = BlasterExplosion;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/blaster_explosion.js\n// module id = 4\n// module chunks = 0","const MovingObject = require('./moving_object');\r\nconst Util = require('./util');\r\n\r\nclass EnemyExplosion extends MovingObject {\r\n  constructor(options) {\r\n    super(options);\r\n    this.tubeQuadIdx = options.tubeQuadIdx;\r\n    this.zPos = options.zPos;\r\n    this.size = 0.25;\r\n  }\r\n\r\n  draw(context) {\r\n    this.drawExplosion(context);\r\n  }\r\n\r\n  drawExplosion(context) {\r\n    const tubeQuad = this.game.tubeQuads[this.tubeQuadIdx];\r\n    const posFrom = Util.midpoint(tubeQuad[0], tubeQuad[1]);\r\n    const posTo = Util.midpoint(tubeQuad[2], tubeQuad[3]);\r\n    const zFraction = this.zPos / EnemyExplosion.MAX_Z_POS;\r\n    const easeFraction = 1 - Math.pow(zFraction - 1, 2);\r\n    const vectorTo = Util.vector(posFrom, posTo, easeFraction);\r\n    const pos = Util.addVector(posFrom, vectorTo);\r\n    const size = 10 * this.size * (2 - easeFraction);\r\n    context.strokeStyle = EnemyExplosion.WHITE;\r\n    context.shadowColor = EnemyExplosion.WHITE;\r\n    context.shadowBlur = EnemyExplosion.WHITE;\r\n    context.beginPath();\r\n    context.moveTo(pos[0] - size, pos[1]);\r\n    context.lineTo(pos[0] + size , pos[1]);\r\n    context.moveTo(pos[0], pos[1] - size);\r\n    context.lineTo(pos[0], pos[1] + size);\r\n    context.moveTo(pos[0] - size / Math.sqrt(2), pos[1] - size / Math.sqrt(2));\r\n    context.lineTo(pos[0] + size / Math.sqrt(2), pos[1] + size / Math.sqrt(2));\r\n    context.moveTo(pos[0] + size / Math.sqrt(2), pos[1] - size / Math.sqrt(2));\r\n    context.lineTo(pos[0] - size / Math.sqrt(2), pos[1] + size / Math.sqrt(2));\r\n    context.moveTo(pos[0] + size * Math.sin(Math.PI / 8), pos[1] + size * Math.cos(Math.PI / 8));\r\n    context.lineTo(pos[0] - size * Math.sin(Math.PI / 8), pos[1] - size * Math.cos(Math.PI / 8));\r\n    context.moveTo(pos[0] + size * Math.sin(3 * Math.PI / 8), pos[1] + size * Math.cos(3 * Math.PI / 8));\r\n    context.lineTo(pos[0] - size * Math.sin(3 * Math.PI / 8), pos[1] - size * Math.cos(3 * Math.PI / 8));\r\n    context.moveTo(pos[0] + size * Math.sin(Math.PI / 8), pos[1] - size * Math.cos(Math.PI / 8));\r\n    context.lineTo(pos[0] - size * Math.sin(Math.PI / 8), pos[1] + size * Math.cos(Math.PI / 8));\r\n    context.moveTo(pos[0] + size * Math.sin(3 * Math.PI / 8), pos[1] - size * Math.cos(3 * Math.PI / 8));\r\n    context.lineTo(pos[0] - size * Math.sin(3 * Math.PI / 8), pos[1] + size * Math.cos(3 * Math.PI / 8));\r\n    context.closePath();\r\n    context.stroke();\r\n  }\r\n\r\n  move(delta) {\r\n    this.size += 0.25;\r\n    if (this.size > 1) {\r\n      this.remove();\r\n    }\r\n  }\r\n}\r\n\r\nEnemyExplosion.WHITE = '#ffffff';\r\nEnemyExplosion.SHADOW_BLUR = 10;\r\nEnemyExplosion.MAX_Z_POS = 120;\r\n\r\nmodule.exports = EnemyExplosion;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/enemy_explosion.js\n// module id = 5\n// module chunks = 0","const Util = require('./util');\r\nconst Blaster = require('./blaster');\r\nconst BlasterBullet = require('./blaster_bullet');\r\nconst BlasterExplosion = require('./blaster_explosion');\r\nconst Flipper = require('./flipper');\r\nconst EnemyBullet = require('./enemy_bullet');\r\nconst EnemyExplosion = require('./enemy_explosion');\r\n\r\nclass Game {\r\n  constructor() {\r\n    this.blaster = new Blaster({ game: this });\r\n    this.currentTubeIdx = 0;\r\n    this.tubeQuads = [];\r\n    this.blasters = [];\r\n    this.blasterBullets = [];\r\n    this.blasterExplosions = [];\r\n    this.flippers = [];\r\n    this.enemyBullets = [];\r\n    this.enemyBulletZVel = 2;\r\n    this.enemyExplosions = [];\r\n    this.died = false;\r\n    this.maxNumEnemyBullets = 1;\r\n    this.maxNumEnemies = 2;\r\n    this.flipperWait = 10;\r\n    this.lives = 2;\r\n    this.score = 0;\r\n    this.level = 1;\r\n\r\n    this.defineTubeQuads(Game.TUBE_CIRCLE);\r\n    this.innerEnemyQueue = [];\r\n    this.outerEnemyQueue = Array(this.tubeQuads.length).fill(null);\r\n\r\n    this.queueEnemies(...Array(4).fill('flipper'));\r\n  }\r\n\r\n  add(object) {\r\n    if (object instanceof Blaster) {\r\n      this.blasters.push(object);\r\n    } else if (object instanceof BlasterBullet) {\r\n      this.blasterBullets.push(object);\r\n    } else if (object instanceof BlasterExplosion) {\r\n      this.blasterExplosions.push(object);\r\n    } else if (object instanceof Flipper) {\r\n      this.flippers.push(object);\r\n    } else if (object instanceof EnemyBullet) {\r\n      this.enemyBullets.push(object);\r\n    } else if (object instanceof EnemyExplosion) {\r\n      this.enemyExplosions.push(object);\r\n    } else {\r\n      throw 'unexpected object';\r\n    }\r\n  }\r\n\r\n  queueEnemies(...objects) {\r\n    for (let i = 0; i < objects.length; i++) {\r\n      this.innerEnemyQueue.push({\r\n        enemyType: objects[i],\r\n        tubeQuadIdx: Math.floor(this.tubeQuads.length * Math.random()),\r\n        zPos: Math.random(),\r\n      });\r\n    }\r\n  }\r\n\r\n  addBlaster() {\r\n    this.add(this.blaster);\r\n    return this.blaster;\r\n  }\r\n\r\n  allObjects() {\r\n    return [].concat(\r\n      this.blasters,\r\n      this.blasterBullets,\r\n      this.blasterExplosions,\r\n      this.flippers,\r\n      this.enemyBullets,\r\n      this.enemyExplosions\r\n    );\r\n  }\r\n\r\n  outerEnemies() {\r\n    let outerEnemies = 0;\r\n    for (let i = 0; i < this.outerEnemyQueue.length; i++) {\r\n      if (this.outerEnemyQueue[i] !== null) {\r\n        outerEnemies += 1;\r\n      }\r\n    }\r\n    return outerEnemies;\r\n  }\r\n\r\n  checkCollisions() {\r\n    const blasterObjects = [].concat(\r\n      this.blasters,\r\n      this.blasterBullets\r\n    );\r\n    const enemyObjects = [].concat(\r\n      this.flippers,\r\n      this.enemyBullets\r\n    );\r\n    for (let i = 0; i < enemyObjects.length; i++) {\r\n      for (let j = 0; j < blasterObjects.length; j++) {\r\n        const enemy = enemyObjects[i];\r\n        const blasterObject = blasterObjects[j];\r\n        if (enemy.isCollidedWith(blasterObject)) {\r\n          enemy.collideWith(blasterObject);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  draw(context) {\r\n    context.clearRect(0, 0, Game.DIM_X, Game.DIM_Y);\r\n    context.fillStyle = '#000000';\r\n    context.fillRect(0, 0, Game.DIM_X, Game.DIM_Y);\r\n    this.drawTubeQuads(context, Game.BLUE);\r\n    this.drawInnerEnemyQueue(context);\r\n    this.drawOuterEnemyQueue(context);\r\n    this.allObjects().forEach((object) => {\r\n      object.draw(context);\r\n    });\r\n    context.fillStyle = '#FFFFFF';\r\n    context.font=\"20px Arial\";\r\n    context.shadowBlur = 0;\r\n    context.fillText(`Lives: ${this.lives}`, 10, 30);\r\n    context.fillText(`Score: ${this.score}`, 10, 50);\r\n    context.fillText(`Level: ${this.level}`, 10, 70);\r\n  }\r\n\r\n  defineTubeQuads(tubeShape) {\r\n    this.tubeQuads = [];\r\n    for (let i = 0; i < tubeShape[0].length - 1; i++) {\r\n      this.tubeQuads.push([\r\n        tubeShape[0][i],\r\n        tubeShape[0][i + 1],\r\n        tubeShape[1][i + 1],\r\n        tubeShape[1][i],\r\n      ]);\r\n    }\r\n  }\r\n\r\n  drawTubeQuads(context, color) {\r\n    context.shadowColor = color;\r\n    context.shadowBlur = Game.SHADOW_BLUR;\r\n\r\n    context.strokeStyle = color;\r\n    for (let i = 0; i < this.tubeQuads.length; i++) {\r\n      const quadrilateral = this.tubeQuads[i];\r\n      context.beginPath();\r\n      context.moveTo(...quadrilateral[0]);\r\n      context.lineTo(...quadrilateral[1]);\r\n      context.lineTo(...quadrilateral[2]);\r\n      context.lineTo(...quadrilateral[3]);\r\n      context.closePath();\r\n      context.stroke();\r\n    }\r\n  }\r\n\r\n  drawInnerEnemyQueue(context) {\r\n    if (this.innerEnemyQueue.length > 0 && this.outerEnemies() < this.maxNumEnemies && this.outerEnemyQueue[this.innerEnemyQueue[0].tubeQuadIdx] === null && Math.random() < 0.5) {\r\n      this.outerEnemyQueue[this.innerEnemyQueue[0].tubeQuadIdx] = this.innerEnemyQueue.shift().enemyType;\r\n    }\r\n\r\n    for (let i = 0; i < this.innerEnemyQueue.length; i++) {\r\n      if (!this.died) {\r\n        this.innerEnemyQueue[i].tubeQuadIdx -= 0.5;\r\n        if (this.innerEnemyQueue[i].tubeQuadIdx < 0) {\r\n          this.innerEnemyQueue[i].tubeQuadIdx = this.tubeQuads.length - 0.5;\r\n        }\r\n      }\r\n      let enemy = this.innerEnemyQueue[i];\r\n      context.fillStyle = Game.RED;\r\n      context.shadowColor = Game.RED;\r\n      context.shadowBlur = Game.SHADOW_BLUR;\r\n      const tubeQuad = this.tubeQuads[Math.floor(enemy.tubeQuadIdx)];\r\n      const posFrom = Util.midpoint(tubeQuad[2], tubeQuad[3]);\r\n      const vectorTo = Util.orthogonalUnitVector(tubeQuad[2], tubeQuad[3], 10 + 5 * enemy.zPos);\r\n      const pos = Util.addVector(posFrom, vectorTo);\r\n      context.beginPath();\r\n      context.arc(\r\n        pos[0], pos[1], 1, 0, 2 * Math.PI, true\r\n      );\r\n      context.fill();\r\n    }\r\n  }\r\n\r\n  drawOuterEnemyQueue(context) {\r\n    for (let i = 0; i < this.tubeQuads.length; i++) {\r\n      if (this.outerEnemyQueue[i] !== null) {\r\n        context.fillStyle = Game.RED;\r\n        context.shadowColor = Game.RED;\r\n        context.shadowBlur = Game.SHADOW_BLUR;\r\n        const tubeQuad = this.tubeQuads[i];\r\n        const posFrom = Util.midpoint(tubeQuad[2], tubeQuad[3]);\r\n        const vectorTo = Util.orthogonalUnitVector(tubeQuad[2], tubeQuad[3], 5);\r\n        const pos = Util.addVector(posFrom, vectorTo);\r\n        context.beginPath();\r\n        context.arc(\r\n          pos[0], pos[1], 1, 0, 2 * Math.PI, true\r\n        );\r\n        context.fill();\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseMove(context) {\r\n    return (e) => {\r\n      if (!this.died) {\r\n        for (let i = 0; i < this.tubeQuads.length; i++) {\r\n          const point = [e.offsetX, e.offsetY];\r\n          const boundary = this.tubeQuads[i];\r\n          if (Util.isInside(point, boundary)) {\r\n            this.blasters[0].targetXPos = Game.NUM_BLASTER_POSITIONS * i + this.xPosInTubeQuad(point, boundary);\r\n          }\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  xPosInTubeQuad(point, boundary) {\r\n    return Math.floor(Game.NUM_BLASTER_POSITIONS * Util.xFractionInTubeQuad(point, boundary));\r\n  }\r\n\r\n  moveObjects(delta) {\r\n    let bulletsAndExplosions = [].concat(\r\n      this.blasterBullets,\r\n      this.blasterExplosions,\r\n      this.enemyBullets,\r\n      this.enemyExplosions\r\n    );\r\n    if (this.died && bulletsAndExplosions.length > 0) {\r\n      bulletsAndExplosions.forEach((object) => {\r\n        object.move(delta);\r\n      });\r\n    } else {\r\n      this.allObjects().forEach((object) => {\r\n        object.move(delta);\r\n      });\r\n    }\r\n  }\r\n\r\n  remove(object) {\r\n    if (object instanceof Blaster) {\r\n      this.blasters = [];\r\n      this.died = true;\r\n    } else if (object instanceof BlasterBullet) {\r\n      this.blasterBullets.splice(this.blasterBullets.indexOf(object), 1);\r\n    } else if (object instanceof BlasterExplosion) {\r\n      this.blasterExplosions.splice(this.blasterExplosions.indexOf(object), 1);\r\n    } else if (object instanceof Flipper) {\r\n      this.flippers.splice(this.flippers.indexOf(object), 1);\r\n    } else if (object instanceof EnemyBullet) {\r\n      this.enemyBullets.splice(this.enemyBullets.indexOf(object), 1);\r\n    } else if (object instanceof EnemyExplosion) {\r\n      this.enemyExplosions.splice(this.enemyExplosions.indexOf(object), 1);\r\n    } else {\r\n      throw 'unexpected object';\r\n    }\r\n  }\r\n\r\n  step(delta) {\r\n    this.checkCollisions();\r\n    this.moveObjects(delta);\r\n\r\n    const enemies = [].concat(\r\n      this.flippers\r\n    );\r\n    for (let i = 0; i < this.outerEnemyQueue.length; i++) {\r\n      if (!this.died && this.outerEnemyQueue[i] !== null && enemies.length < this.maxNumEnemies && Math.random() < 0.1) {\r\n        switch (this.outerEnemyQueue[i]) {\r\n          case 'flipper':\r\n            this.add(new Flipper({\r\n              xVel: Math.random() < 0.5 ? -1 : 1,\r\n              xPos: i * Game.NUM_FLIPPER_POSITIONS + Math.floor(Game.NUM_FLIPPER_POSITIONS / 2),\r\n              game: this\r\n            }));\r\n            this.outerEnemyQueue[i] = null;\r\n            break;\r\n          default:\r\n            throw 'unexpected object';\r\n        }\r\n      }\r\n    }\r\n    if (this.died && this.allObjects().length === 0) {\r\n      if (this.lives > 0) {\r\n        this.died = false;\r\n        this.lives -= 1;\r\n        this.addBlaster();\r\n      } else {\r\n\r\n      }\r\n    }\r\n\r\n    const allEnemies = [].concat(\r\n      this.flippers,\r\n      this.innerEnemyQueue,\r\n      Array(this.outerEnemies())\r\n    );\r\n    if (!this.died && allEnemies.length === 0) {\r\n      let tubeShapeIdx = Math.floor(Game.TUBE_SHAPES.length * Math.random());\r\n      while (tubeShapeIdx === this.currentTubeIdx) {\r\n        tubeShapeIdx = Math.floor(Game.TUBE_SHAPES.length * Math.random());\r\n      }\r\n      this.currentTubeIdx = tubeShapeIdx;\r\n      this.defineTubeQuads(Game.TUBE_SHAPES[tubeShapeIdx]);\r\n      this.blasterBullets = [];\r\n      this.enemyBullets = [];\r\n      this.level += 1;\r\n      this.maxNumEnemies = Math.ceil(Math.pow(Math.log(this.level), 2));\r\n      this.maxNumEnemyBullets = this.maxNumEnemies;\r\n      this.enemyBulletZVel = Math.ceil(Math.log(this.level + 1));\r\n      if (this.flipperWait > 2) {\r\n        this.flipperWait -= 1;\r\n      }\r\n      this.queueEnemies(...Array(this.level * 2).fill('flipper'));\r\n    }\r\n  }\r\n\r\n}\r\n\r\nGame.DIM_X = 512;\r\nGame.DIM_Y = 450;\r\nGame.NUM_BLASTER_POSITIONS = 7;\r\nGame.NUM_FLIPPER_POSITIONS = 7;\r\nGame.BLUE = '#0000cc';\r\nGame.YELLOW = '#ffff00';\r\nGame.RED = '#ff0000';\r\nGame.SHADOW_BLUR = 10;\r\nGame.TUBE_CIRCLE = [\r\n  [\r\n    [256, 60],\r\n    [316, 73],\r\n    [368, 108],\r\n    [403, 160],\r\n    [416, 221],\r\n    [403, 281],\r\n    [368, 334],\r\n    [315, 368],\r\n    [256, 381],\r\n    [195, 368],\r\n    [143, 334],\r\n    [108, 281],\r\n    [95, 221],\r\n    [108, 160],\r\n    [143, 108],\r\n    [195, 73],\r\n    [256, 60],\r\n  ],\r\n  [\r\n    [256, 255],\r\n    [264, 257],\r\n    [273, 262],\r\n    [277, 270],\r\n    [280, 279],\r\n    [277, 289],\r\n    [273, 296],\r\n    [264, 301],\r\n    [256, 303],\r\n    [247, 301],\r\n    [238, 296],\r\n    [234, 289],\r\n    [231, 279],\r\n    [234, 270],\r\n    [238, 262],\r\n    [247, 257],\r\n    [256, 255],\r\n  ]\r\n];\r\nGame.TUBE_SQUARE = [\r\n  [\r\n    [256, 95],\r\n    [328, 95],\r\n    [401, 95],\r\n    [401, 169],\r\n    [401, 242],\r\n    [401, 314],\r\n    [401, 387],\r\n    [328, 387],\r\n    [256, 387],\r\n    [183, 387],\r\n    [110, 387],\r\n    [110, 314],\r\n    [110, 242],\r\n    [110, 169],\r\n    [110, 95],\r\n    [183, 95],\r\n    [256, 95]\r\n  ],\r\n  [\r\n    [256, 270],\r\n    [267, 270],\r\n    [279, 270],\r\n    [279, 282],\r\n    [279, 294],\r\n    [279, 305],\r\n    [279, 317],\r\n    [267, 317],\r\n    [256, 317],\r\n    [244, 317],\r\n    [232, 317],\r\n    [232, 305],\r\n    [232, 294],\r\n    [232, 282],\r\n    [232, 270],\r\n    [244, 270],\r\n    [256, 270],\r\n  ]\r\n];\r\nGame.TUBE_STARBURST = [\r\n  [\r\n    [256, 114],\r\n    [332, 79],\r\n    [346, 151],\r\n    [421, 168],\r\n    [389, 242],\r\n    [421, 314],\r\n    [346, 332],\r\n    [332, 413],\r\n    [256, 368],\r\n    [179, 413],\r\n    [165, 332],\r\n    [90, 314],\r\n    [128, 242],\r\n    [90, 168],\r\n    [165, 151],\r\n    [179, 79],\r\n    [256, 114],\r\n  ],\r\n  [\r\n    [256, 268],\r\n    [266, 263],\r\n    [268, 273],\r\n    [278, 275],\r\n    [274, 286],\r\n    [278, 295],\r\n    [268, 298],\r\n    [266, 309],\r\n    [256, 303],\r\n    [245, 309],\r\n    [243, 298],\r\n    [233, 295],\r\n    [238, 286],\r\n    [233, 275],\r\n    [243, 273],\r\n    [245, 263],\r\n    [256, 268],\r\n  ]\r\n];\r\nGame.TUBE_CROSS = [\r\n  [\r\n    [256, 60],\r\n    [336, 60],\r\n    [336, 141],\r\n    [416, 141],\r\n    [416, 221],\r\n    [416, 301],\r\n    [336, 301],\r\n    [336, 381],\r\n    [256, 381],\r\n    [175, 381],\r\n    [175, 301],\r\n    [95, 301],\r\n    [95, 221],\r\n    [95, 141],\r\n    [175, 141],\r\n    [175, 60],\r\n    [256, 60],\r\n  ],\r\n  [\r\n    [256, 255],\r\n    [268, 255],\r\n    [268, 267],\r\n    [280, 267],\r\n    [280, 279],\r\n    [280, 291],\r\n    [268, 291],\r\n    [268, 303],\r\n    [256, 303],\r\n    [243, 303],\r\n    [243, 291],\r\n    [231, 291],\r\n    [231, 279],\r\n    [231, 267],\r\n    [243, 267],\r\n    [243, 255],\r\n    [256, 255],\r\n  ]\r\n];\r\nGame.TUBE_PEANUT = [\r\n  [\r\n    [226, 144],\r\n    [285, 144],\r\n    [346, 113],\r\n    [412, 128],\r\n    [455, 180],\r\n    [455, 254],\r\n    [412, 305],\r\n    [346, 320],\r\n    [285, 288],\r\n    [226, 288],\r\n    [165, 320],\r\n    [99, 305],\r\n    [56, 254],\r\n    [56, 180],\r\n    [99, 128],\r\n    [165, 113],\r\n    [226, 144],\r\n  ],\r\n  [\r\n    [252, 247],\r\n    [259, 247],\r\n    [266, 243],\r\n    [274, 245],\r\n    [280, 251],\r\n    [280, 260],\r\n    [274, 266],\r\n    [266, 268],\r\n    [259, 264],\r\n    [252, 264],\r\n    [245, 268],\r\n    [237, 266],\r\n    [231, 260],\r\n    [231, 251],\r\n    [237, 245],\r\n    [245, 243],\r\n    [252, 247],\r\n  ]\r\n];\r\nGame.TUBE_TRIANGLE = [\r\n  [\r\n    [256, 60],\r\n    [288, 123],\r\n    [318, 188],\r\n    [350, 252],\r\n    [383, 316],\r\n    [416, 381],\r\n    [361, 381],\r\n    [310, 381],\r\n    [256, 381],\r\n    [201, 381],\r\n    [148, 381],\r\n    [95, 381],\r\n    [128, 316],\r\n    [158, 252],\r\n    [190, 188],\r\n    [223, 123],\r\n    [256, 60],\r\n  ],\r\n  [\r\n    [256, 256],\r\n    [260, 264],\r\n    [265, 274],\r\n    [270, 284],\r\n    [275, 294],\r\n    [280, 303],\r\n    [271, 303],\r\n    [264, 303],\r\n    [256, 303],\r\n    [247, 303],\r\n    [239, 303],\r\n    [231, 303],\r\n    [236, 294],\r\n    [241, 284],\r\n    [246, 274],\r\n    [251, 264],\r\n    [256, 256],\r\n  ]\r\n];\r\nGame.TUBE_CLOVER = [\r\n  [\r\n    [256, 164],\r\n    [295, 82],\r\n    [393, 96],\r\n    [407, 188],\r\n    [324, 234],\r\n    [407, 280],\r\n    [393, 372],\r\n    [295, 386],\r\n    [256, 304],\r\n    [216, 386],\r\n    [118, 372],\r\n    [104, 280],\r\n    [187, 234],\r\n    [104, 188],\r\n    [118, 96],\r\n    [216, 82],\r\n    [256, 164],\r\n  ],\r\n  [\r\n    [256, 253],\r\n    [261, 240],\r\n    [276, 242],\r\n    [278, 256],\r\n    [266, 264],\r\n    [278, 270],\r\n    [276, 284],\r\n    [261, 286],\r\n    [256, 273],\r\n    [250, 286],\r\n    [235, 284],\r\n    [233, 270],\r\n    [245, 264],\r\n    [233, 256],\r\n    [235, 242],\r\n    [250, 240],\r\n    [256, 253],\r\n  ]\r\n];\r\nGame.TUBE_CELTIC = [\r\n  [\r\n    [227, 60],\r\n    [284, 60],\r\n    [301, 121],\r\n    [347, 170],\r\n    [416, 189],\r\n    [416, 252],\r\n    [347, 271],\r\n    [301, 319],\r\n    [284, 381],\r\n    [227, 381],\r\n    [210, 319],\r\n    [164, 271],\r\n    [95, 252],\r\n    [95, 189],\r\n    [164, 170],\r\n    [210, 121],\r\n    [227, 60],\r\n  ],\r\n  [\r\n    [251, 255],\r\n    [260, 255],\r\n    [262, 264],\r\n    [269, 271],\r\n    [280, 274],\r\n    [280, 284],\r\n    [269, 286],\r\n    [262, 294],\r\n    [260, 303],\r\n    [251, 303],\r\n    [249, 294],\r\n    [242, 286],\r\n    [231, 284],\r\n    [231, 274],\r\n    [242, 271],\r\n    [249, 264],\r\n    [251, 255],\r\n  ]\r\n];\r\nGame.TUBE_HEART = [\r\n  [\r\n    [256, 217],\r\n    [265, 140],\r\n    [307, 70],\r\n    [385, 76],\r\n    [416, 147],\r\n    [416, 228],\r\n    [393, 301],\r\n    [336, 357],\r\n    [256, 380],\r\n    [175, 357],\r\n    [118, 301],\r\n    [95, 228],\r\n    [95, 147],\r\n    [126, 76],\r\n    [204, 70],\r\n    [246, 140],\r\n    [256, 217]\r\n  ],\r\n  [\r\n    [256, 336],\r\n    [257, 325],\r\n    [263, 314],\r\n    [275, 314],\r\n    [280, 325],\r\n    [280, 338],\r\n    [276, 349],\r\n    [268, 357],\r\n    [256, 360],\r\n    [243, 357],\r\n    [235, 349],\r\n    [231, 338],\r\n    [231, 325],\r\n    [236, 314],\r\n    [248, 314],\r\n    [255, 325],\r\n    [256, 336],\r\n  ]\r\n];\r\nGame.TUBE_SHAPES = [\r\n  Game.TUBE_CIRCLE,\r\n  Game.TUBE_SQUARE,\r\n  Game.TUBE_STARBURST,\r\n  Game.TUBE_CROSS,\r\n  Game.TUBE_PEANUT,\r\n  Game.TUBE_CLOVER,\r\n  Game.TUBE_CELTIC,\r\n];\r\n\r\nmodule.exports = Game;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game.js\n// module id = 6\n// module chunks = 0","const MovingObject = require('./moving_object');\r\nconst BlasterBullet = require('./blaster_bullet');\r\nconst Blaster = require('./blaster');\r\nconst BlasterExplosion = require('./blaster_explosion');\r\nconst EnemyExplosion = require('./enemy_explosion');\r\nconst Util = require('./util');\r\n\r\nclass EnemyBullet extends MovingObject {\r\n  constructor(options) {\r\n    super(options);\r\n    this.tubeQuadIdx = options.tubeQuadIdx;\r\n    this.zPos = options.zPos;\r\n    this.zVel = this.game.enemyBulletZVel;\r\n  }\r\n\r\n  draw(context) {\r\n    const tubeQuad = this.game.tubeQuads[this.tubeQuadIdx];\r\n    context.fillStyle = EnemyBullet.WHITE;\r\n    context.shadowColor = EnemyBullet.WHITE;\r\n    context.shadowBlur = EnemyBullet.WHITE;\r\n    context.beginPath();\r\n    const posFrom = Util.midpoint(tubeQuad[0], tubeQuad[1]);\r\n    const posTo = Util.midpoint(tubeQuad[2], tubeQuad[3]);\r\n    const zFraction = this.zPos / EnemyBullet.MAX_Z_POS;\r\n    const easeFraction = 1 - Math.pow(zFraction - 1, 2);\r\n    const vectorTo = Util.vector(posFrom, posTo, easeFraction);\r\n    const pos = Util.addVector(posFrom, vectorTo);\r\n    context.arc(\r\n      pos[0], pos[1], 3 * (1 - easeFraction) + 1, 0, 2 * Math.PI, true\r\n    );\r\n    context.fill();\r\n  }\r\n\r\n  isCollidedWith(blasterObject) {\r\n    if (blasterObject instanceof BlasterBullet) {\r\n      return this.tubeQuadIdx === blasterObject.tubeQuadIdx && Math.abs(blasterObject.zPos - this.zPos) < 5;\r\n    } else if (blasterObject instanceof Blaster) {\r\n      return this.tubeQuadIdx === blasterObject.tubeQuadIdx && this.zPos === 0;\r\n    }\r\n  }\r\n\r\n  collideWith(blasterObject) {\r\n    if (blasterObject instanceof BlasterBullet) {\r\n      this.remove();\r\n      blasterObject.remove();\r\n      this.game.add(new EnemyExplosion({\r\n        tubeQuadIdx: this.tubeQuadIdx,\r\n        zPos: this.zPos,\r\n        game: this.game\r\n      }));\r\n    } else if (blasterObject instanceof Blaster) {\r\n      blasterObject.remove();\r\n      this.game.add(new BlasterExplosion({\r\n        tubeQuadIdx: this.tubeQuadIdx,\r\n        game: this.game\r\n      }));\r\n    }\r\n  }\r\n\r\n  move(delta) {\r\n    if (this.zPos === 0) {\r\n      this.remove();\r\n    }\r\n    this.zPos -= this.zVel;\r\n    if (this.zPos < 0) {\r\n      this.zPos = 0;\r\n    }\r\n  }\r\n}\r\n\r\nEnemyBullet.WHITE = '#ffffff';\r\nEnemyBullet.SHADOW_BLUR = 10;\r\nEnemyBullet.MAX_Z_POS = 120;\r\n\r\nmodule.exports = EnemyBullet;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/enemy_bullet.js\n// module id = 7\n// module chunks = 0","class GameView {\r\n  constructor(game, canvasEl) {\r\n    this.game = game;\r\n    this.context = canvasEl.getContext('2d');\r\n    this.game.draw(this.context);\r\n    this.blaster = this.game.addBlaster();\r\n    this.bindHandlers(canvasEl);\r\n  }\r\n\r\n  bindHandlers(canvasEl) {\r\n    canvasEl.addEventListener('mousemove', this.game.handleMouseMove(this.context));\r\n    canvasEl.addEventListener('mousedown', () => {\r\n      this.blaster.firing = true;\r\n    });\r\n    canvasEl.addEventListener('mouseup', () => {\r\n      this.blaster.firing = false;\r\n    });\r\n    document.addEventListener('keydown', (e) => {\r\n      switch (e.code) {\r\n        case 'Space':\r\n          this.blaster.firing = true;\r\n          break;\r\n        case 'ArrowLeft':\r\n          this.blaster.changingXPos = 7;\r\n          break;\r\n        case 'ArrowRight':\r\n          this.blaster.changingXPos = -7;\r\n          break;\r\n      }\r\n    });\r\n    document.addEventListener('keyup', (e) => {\r\n      switch (e.code) {\r\n        case 'Space':\r\n          this.blaster.firing = false;\r\n          break;\r\n        case 'ArrowLeft':\r\n          this.blaster.changingXPos = 0;\r\n          break;\r\n        case 'ArrowRight':\r\n          this.blaster.changingXPos = 0;\r\n          break;\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  start() {\r\n    // requestAnimationFrame(this.animate.bind(this));\r\n    setTimeout(this.animate.bind(this), 40); // 25 fps\r\n  }\r\n\r\n  animate(time) {\r\n    this.game.step();\r\n    this.game.draw(this.context);\r\n    // requestAnimationFrame(this.animate.bind(this));\r\n    setTimeout(this.animate.bind(this), 40); // 25 fps\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = GameView;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game_view.js\n// module id = 8\n// module chunks = 0","const Game = require('./game');\r\nconst GameView = require('./game_view');\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  const canvasEl = document.getElementsByTagName('canvas')[0];\r\n  canvasEl.width = Game.DIM_X;\r\n  canvasEl.height = Game.DIM_Y;\r\n\r\n  context = canvasEl.getContext('2d');\r\n\r\n  const game = new Game();\r\n  new GameView(game, canvasEl).start();\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/atari_tempest.js\n// module id = 9\n// module chunks = 0","const MovingObject = require('./moving_object');\r\nconst BlasterBullet = require('./blaster_bullet');\r\nconst Blaster = require('./blaster');\r\nconst BlasterExplosion = require('./blaster_explosion');\r\nconst EnemyBullet = require('./enemy_bullet');\r\nconst EnemyExplosion = require('./enemy_explosion');\r\nconst Util = require('./util');\r\n\r\nclass Flipper extends MovingObject {\r\n  constructor(options) {\r\n    super(options);\r\n    this.xPos = options.xPos;\r\n    this.xVel = options.xVel;\r\n    this.zPos = Flipper.MAX_Z_POS;\r\n    this.xPosInTubeQuad = this.xPos % Flipper.NUM_FLIPPER_POSITIONS;\r\n    this.tubeQuadIdx = Math.floor(this.xPos / Flipper.NUM_FLIPPER_POSITIONS);\r\n    this.wait = this.game.flipperWait;\r\n    this.waiting = 0;\r\n    if (Math.random() < 0.5) {\r\n      this.fireBullet();\r\n    }\r\n  }\r\n\r\n  draw(context) {\r\n    this.xPosInTubeQuad = this.xPos % Flipper.NUM_FLIPPER_POSITIONS;\r\n    this.tubeQuadIdx = Math.floor(this.xPos / Flipper.NUM_FLIPPER_POSITIONS);\r\n    const tubeQuad = this.game.tubeQuads[this.tubeQuadIdx];\r\n    context.fillStyle = Flipper.RED;\r\n    context.shadowColor = Flipper.RED;\r\n    context.shadowBlur = Flipper.SHADOW_BLUR;\r\n    context.beginPath();\r\n    const zFraction = this.zPos / Flipper.MAX_Z_POS;\r\n    const easeFraction = 1 - Math.pow(zFraction - 1, 2);\r\n    const vectorTo0 = Util.vector(tubeQuad[0], tubeQuad[3], easeFraction);\r\n    const vectorTo1 = Util.vector(tubeQuad[1], tubeQuad[2], easeFraction);\r\n    let pos0 = Util.addVector(tubeQuad[0], vectorTo0);\r\n    let pos1 = Util.addVector(tubeQuad[1], vectorTo1);\r\n    context.fill();\r\n    const midFlip = Math.floor(Flipper.NUM_FLIPPER_POSITIONS / 2);\r\n    let orthogonalVector;\r\n    if (this.xPosInTubeQuad > midFlip) {\r\n      orthogonalVector = Util.orthogonalUnitVector(pos0, pos1, 15 * (1 - 0.9 * easeFraction));\r\n      pos0 = Util.rotateAroundPoint(pos0, pos1, -Math.PI * (this.xPosInTubeQuad - midFlip) / Flipper.NUM_FLIPPER_POSITIONS);\r\n      orthogonalVector = Util.rotateAroundPoint(orthogonalVector, [0, 0], -Math.PI * (this.xPosInTubeQuad - midFlip) / Flipper.NUM_FLIPPER_POSITIONS);\r\n    } else {\r\n      orthogonalVector = Util.orthogonalUnitVector(pos0, pos1, -15 * (1 - 0.9 * easeFraction));\r\n      pos1 = Util.rotateAroundPoint(pos1, pos0, -Math.PI * (this.xPosInTubeQuad - midFlip) / Flipper.NUM_FLIPPER_POSITIONS);\r\n      orthogonalVector = Util.rotateAroundPoint(orthogonalVector, [0, 0], -Math.PI * (this.xPosInTubeQuad - midFlip) / Flipper.NUM_FLIPPER_POSITIONS);\r\n    }\r\n    const halfOrthogonalVector = Util.vector([0, 0], orthogonalVector, 0.5);\r\n    const pos0Inner = Util.addVector(Util.weightedMidpoint(pos0, pos1, 0.1), orthogonalVector);\r\n    const pos0Crease = Util.addVector(Util.weightedMidpoint(pos0, pos1, 0.2), halfOrthogonalVector);\r\n    const pos1Crease = Util.addVector(Util.weightedMidpoint(pos0, pos1, 0.8), halfOrthogonalVector);\r\n    const pos1Inner = Util.addVector(Util.weightedMidpoint(pos0, pos1, 0.9), orthogonalVector);\r\n\r\n    context.strokeStyle = '#ff0000';\r\n    context.moveTo(...pos0);\r\n    context.lineTo(...pos1Inner);\r\n    context.lineTo(...pos1Crease);\r\n    context.lineTo(...pos1);\r\n    context.lineTo(...pos0Inner);\r\n    context.lineTo(...pos0Crease);\r\n    context.closePath();\r\n    context.stroke();\r\n    if (!this.game.died && Math.random() < 0.01 * this.game.maxNumEnemyBullets) {\r\n      this.fireBullet();\r\n    }\r\n  }\r\n\r\n  fireBullet() {\r\n    if (this.game.enemyBullets.length < this.game.maxNumEnemyBullets) {\r\n      const enemyBullet = new EnemyBullet({\r\n        tubeQuadIdx: this.tubeQuadIdx,\r\n        zPos: this.zPos,\r\n        game: this.game,\r\n      });\r\n      this.game.add(enemyBullet);\r\n    }\r\n  }\r\n\r\n  isCollidedWith(blasterObject) {\r\n    if (blasterObject instanceof BlasterBullet) {\r\n      const midFlip = Math.floor(Flipper.NUM_FLIPPER_POSITIONS / 2);\r\n      const blasterObjectXPos = blasterObject.tubeQuadIdx * Flipper.NUM_FLIPPER_POSITIONS + midFlip;\r\n      return Math.abs(blasterObjectXPos - this.xPos) < Flipper.NUM_FLIPPER_POSITIONS && Math.abs(blasterObject.zPos - this.zPos) < 5;\r\n    } else if (blasterObject instanceof Blaster) {\r\n      const midFlip = Math.floor(Flipper.NUM_FLIPPER_POSITIONS / 2);\r\n      const blasterObjectXPos = blasterObject.tubeQuadIdx * Flipper.NUM_FLIPPER_POSITIONS + midFlip;\r\n      return this.xPos === blasterObjectXPos && this.zPos === 0;\r\n    }\r\n  }\r\n\r\n  collideWith(blasterObject) {\r\n    if (blasterObject instanceof BlasterBullet) {\r\n      this.remove();\r\n      blasterObject.remove();\r\n      this.game.add(new EnemyExplosion({\r\n        tubeQuadIdx: this.tubeQuadIdx,\r\n        zPos: this.zPos,\r\n        game: this.game\r\n      }));\r\n      this.game.score += 150;\r\n    } else if (blasterObject instanceof Blaster) {\r\n      blasterObject.remove();\r\n      this.game.add(new BlasterExplosion({\r\n        tubeQuadIdx: this.tubeQuadIdx,\r\n        game: this.game\r\n      }));\r\n    }\r\n  }\r\n\r\n  move(delta) {\r\n    if (this.game.died) {\r\n      this.zPos += 10;\r\n      if (this.zPos > Flipper.MAX_Z_POS) {\r\n        this.game.queueEnemies('flipper');\r\n        this.remove();\r\n      }\r\n    } else {\r\n      if (this.zPos > 0) {\r\n        this.zPos -= 1;\r\n      }\r\n      if (this.waiting > 0) {\r\n        this.waiting -= 1;\r\n      } else {\r\n        this.xPos += this.xVel;\r\n        const numXPos = this.game.tubeQuads.length * Flipper.NUM_FLIPPER_POSITIONS;\r\n        if (this.xPos < 0) {\r\n          this.xPos += numXPos;\r\n        } else if (this.xPos >= numXPos) {\r\n          this.xPos -= numXPos;\r\n        }\r\n        if (this.xPosInTubeQuad + this.xVel === Math.floor(Flipper.NUM_FLIPPER_POSITIONS / 2)) {\r\n          if (this.zPos > 0) {\r\n            this.waiting = this.wait;\r\n          } else {\r\n            this.waiting = Math.floor(this.wait / 2);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nFlipper.RED = '#ff0000';\r\nFlipper.SHADOW_BLUR = 10;\r\nFlipper.NUM_FLIPPER_POSITIONS = 7;\r\nFlipper.MAX_Z_POS = 120;\r\n\r\nmodule.exports = Flipper;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/flipper.js\n// module id = 10\n// module chunks = 0"],"sourceRoot":""}